/**
 * Modules in this bundle
 * @license
 * 
 * react-carousel-ninja:
 *   license: MIT
 *   author: ahomu
 *   homepage: https://github.com/ahomu/Loxe
 *   version: 0.1.0
 * 
 * date-now:
 *   licenses: MIT
 *   author: Raynos <raynos2@gmail.com>
 *   maintainers: raynos <raynos2@gmail.com>
 *   contributors: Artem Shoobovych
 *   homepage: https://github.com/Raynos/date-now
 *   version: 1.0.1
 * 
 * debounce:
 *   license: MIT
 *   maintainers: mattmueller <mattmuelle@gmail.com>, jongleberry <jonathanrichardong@gmail.com>, tootallnate <nathan@tootallnate.net>, clintwood <clint@anotherway.co.za>, thehydroimpulse <dnfagnan@gmail.com>, tjholowaychuk <tj@vision-media.ca>, rauchg <rauchg@gmail.com>, retrofox <rdsuarez@gmail.com>, coreh <thecoreh@gmail.com>, forbeslindesay <forbes@lindesay.co.uk>, kelonye <kelonyemitchel@gmail.com>, yields <yields@icloud.com>, anthonyshort <antshort@gmail.com>, ianstormtaylor <ian@ianstormtaylor.com>, cristiandouce <cristian@gravityonmars.com>, swatinem <arpad.borsos@googlemail.com>, stagas <gstagas@gmail.com>, amasad <amjad.masad@gmail.com>, juliangruber <julian@juliangruber.com>, shtylman <shtylman@gmail.com>, calvinfo <calvin@calv.info>, dominicbarnes <dominic@dbarnes.info>, timoxley <secoif@gmail.com>, stephenmathieson <me@stephenmathieson.com>, trevorgerhardt <trevorgerhardt@gmail.com>
 *   homepage: https://github.com/component/debounce
 *   version: 1.0.0
 * 
 * undefined:
 * 
 * This header is generated by licensify (https://github.com/twada/licensify)
 */
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

/**
 * Module dependencies.
 */

var now = require('date-now');

/**
 * Returns a function, that, as long as it continues to be invoked, will not
 * be triggered. The function will be called after it stops being called for
 * N milliseconds. If `immediate` is passed, trigger the function on the
 * leading edge, instead of the trailing.
 *
 * @source underscore.js
 * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/
 * @param {Function} function to wrap
 * @param {Number} timeout in ms (`100`)
 * @param {Boolean} whether to execute at the beginning (`false`)
 * @api public
 */

module.exports = function debounce(func, wait, immediate){
  var timeout, args, context, timestamp, result;
  if (null == wait) wait = 100;

  function later() {
    var last = now() - timestamp;

    if (last < wait && last > 0) {
      timeout = setTimeout(later, wait - last);
    } else {
      timeout = null;
      if (!immediate) {
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      }
    }
  };

  return function debounced() {
    context = this;
    args = arguments;
    timestamp = now();
    var callNow = immediate && !timeout;
    if (!timeout) timeout = setTimeout(later, wait);
    if (callNow) {
      result = func.apply(context, args);
      context = args = null;
    }

    return result;
  };
};

},{"date-now":2}],2:[function(require,module,exports){
module.exports = Date.now || now

function now() {
    return new Date().getTime()
}

},{}],3:[function(require,module,exports){
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var React = _react;

var _reactDom = require('react-dom');

var ReactDOM = _reactDom;

var _debounce = require('debounce');

var debounce = _debounce;

var DURATION_DEBOUNCE_RESIZE = 300;
var DELTA_PERCENTAGE_SWIPE = .2;
var DIRECTION_RIGHT = 0;
var DIRECTION_LEFT = 1;

var CarouselNinjaContent = (function (_React$Component) {
    _inherits(CarouselNinjaContent, _React$Component);

    function CarouselNinjaContent() {
        var _this = this;

        _classCallCheck(this, CarouselNinjaContent);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        _React$Component.call.apply(_React$Component, [this].concat(args));
        this.state = {
            outerWidth: 0,
            innerWidth: 0,
            dragging: false,
            deltaX: 0,
            deltaY: 0
        };
        this.startCoordinate = {
            x: 0,
            y: 0
        };
        this.onResize = debounce(function (evt) {
            _this.calculateWidth();
        }, DURATION_DEBOUNCE_RESIZE);
    }

    CarouselNinjaContent.prototype.calculateWidth = function calculateWidth() {
        var firstChild = this.refs['child-0'];
        this.setState({
            outerWidth: ReactDOM.findDOMNode(this).clientWidth,
            innerWidth: firstChild.clientWidth
        });
    };

    CarouselNinjaContent.prototype.onMouseDown = function onMouseDown(evt) {
        this.startCoordinate = {
            x: evt.clientX,
            y: evt.clientY
        };
        this.setState({
            dragging: true
        });
    };

    CarouselNinjaContent.prototype.onMouseMove = function onMouseMove(evt) {
        if (!this.state.dragging) {
            return;
        }
        this.setState({
            deltaX: evt.clientX - this.startCoordinate.x,
            deltaY: evt.clientY - this.startCoordinate.y
        });
    };

    CarouselNinjaContent.prototype.onMouseUp = function onMouseUp() {
        if (!this.state.dragging) {
            return;
        }
        this.handleSwipe();
    };

    CarouselNinjaContent.prototype.onMouseLeave = function onMouseLeave() {
        if (!this.state.dragging) {
            return;
        }
        this.handleSwipe();
    };

    CarouselNinjaContent.prototype.handleSwipe = function handleSwipe() {
        var deltaAbsX = Math.abs(this.state.deltaX);
        var threshold = this.state.innerWidth * DELTA_PERCENTAGE_SWIPE;
        if (deltaAbsX > threshold) {
            var direction = this.state.deltaX > -1 ? DIRECTION_RIGHT : DIRECTION_LEFT;
            if (direction === DIRECTION_LEFT) {
                this.props.onSwipeLeft(this.props.select + 1);
            } else if (direction === DIRECTION_RIGHT) {
                this.props.onSwipeRight(this.props.select - 1);
            }
        }
        // reset
        this.startCoordinate = {
            x: 0,
            y: 0
        };
        this.setState({
            dragging: false,
            deltaX: 0,
            deltaY: 0
        });
    };

    CarouselNinjaContent.prototype.componentDidMount = function componentDidMount() {
        this.calculateWidth();
        window.addEventListener('resize', this.onResize);
    };

    CarouselNinjaContent.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if (this.props.onSelect) {
            this.props.onSelect(nextProps.select, this.props.select);
        }
    };

    CarouselNinjaContent.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
        return false || nextProps.select !== this.props.select || nextProps.children !== this.props.children || nextState !== this.state;
    };

    CarouselNinjaContent.prototype.componentWillUnmount = function componentWillUnmount() {
        window.addEventListener('resize', this.onResize);
    };

    CarouselNinjaContent.prototype.render = function render() {
        var _this2 = this;

        var transformDeclaration = undefined;
        // before calc innerWidth (first mount)
        if (this.state.innerWidth) {
            var baseOffsetX = this.state.innerWidth * this.props.select;
            transformDeclaration = 'translate3d(-' + (baseOffsetX - this.state.deltaX) + 'px, 0, 0)';
        } else {
            var offsetPerPane = 100 / React.Children.count(this.props.children);
            transformDeclaration = 'translate3d(-' + offsetPerPane * this.props.select + '%, 0, 0)';
        }
        var widthOuterBwInner = this.state.outerWidth - this.state.innerWidth || 2;
        var style = {
            marginLeft: widthOuterBwInner / 2 + 'px',
            transform: transformDeclaration
        };
        return React.createElement("div", { "ref": "outer", "className": this.props.className + ' carousel-ninja__outer' }, React.createElement("ul", { "ref": "inner", "className": 'carousel-ninja__inner ' + (this.state.dragging ? 'carousel-ninja__inner--dragging' : ''), "style": style, "onMouseDown": this.onMouseDown.bind(this), "onMouseMove": this.onMouseMove.bind(this), "onMouseUp": this.onMouseUp.bind(this), "onMouseLeave": this.onMouseLeave.bind(this) }, React.Children.map(this.props.children, function (child, i) {
            var isSelectedChild = i === _this2.props.select;
            var className = 'carousel-ninja__pane ' + (isSelectedChild ? _this2.props.activeClass : '');
            return React.createElement("li", { "ref": 'child-' + i, "className": className, "key": i, "aria-hidden": isSelectedChild ? 'false' : 'true' }, child);
        })));
    };

    return CarouselNinjaContent;
})(React.Component);

exports['default'] = CarouselNinjaContent;

CarouselNinjaContent.defaultProps = {
    className: '',
    activeClass: 'is-active',
    select: 0,
    onSelect: function onSelect() {},
    onSwipeLeft: function onSwipeLeft() {},
    onSwipeRight: function onSwipeRight() {}
};

},{"debounce":1,"react":undefined,"react-dom":undefined}],4:[function(require,module,exports){
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var React = _react;

var CarouselNinjaSelector = (function (_React$Component) {
    _inherits(CarouselNinjaSelector, _React$Component);

    function CarouselNinjaSelector() {
        _classCallCheck(this, CarouselNinjaSelector);

        _React$Component.apply(this, arguments);
    }

    CarouselNinjaSelector.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if (this.props.onSelect) {
            this.props.onSelect(nextProps.select, this.props.select);
        }
    };

    CarouselNinjaSelector.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
        return false || nextProps.select !== this.props.select || nextProps.children !== this.props.children;
    };

    CarouselNinjaSelector.prototype.renderFromChildren = function renderFromChildren() {
        var _this = this;

        return React.Children.map(this.props.children, function (child, i) {
            var isSelectedChild = i === _this.props.select;
            var className = '' + (isSelectedChild ? _this.props.activeClass : '');
            return React.createElement("li", { "className": className, "key": i, "onClick": _this.props.onClickSelector.bind(_this, i), "aria-selected": isSelectedChild ? 'true' : 'false' }, child);
        });
    };

    CarouselNinjaSelector.prototype.renderItemsBySelf = function renderItemsBySelf() {
        var children = [],
            iz = this.props.length;
        for (var i = 0; i < iz; i++) {
            var isSelectedChild = i === this.props.select;
            var className = 'carousel-ninja__selector-item ' + (isSelectedChild ? this.props.activeClass : '');
            children.push(React.createElement("li", { "className": className, "key": i, "onClick": this.props.onClickSelector.bind(this, i), "aria-selected": isSelectedChild ? 'true' : 'false' }, React.createElement("button", { "tabIndex": -1 })));
        }
        return children;
    };

    CarouselNinjaSelector.prototype.render = function render() {
        return React.createElement("ul", { "className": "carousel-ninja__selector" }, React.Children.count(this.props.children) ? this.renderFromChildren() : this.renderItemsBySelf());
    };

    return CarouselNinjaSelector;
})(React.Component);

exports['default'] = CarouselNinjaSelector;

CarouselNinjaSelector.defaultProps = {
    activeClass: 'is-active',
    select: 0,
    length: 0,
    onSelect: function onSelect() {},
    onClickSelector: function onClickSelector() {}
};

},{"react":undefined}],5:[function(require,module,exports){
/// <reference path="../typings/bundle.d.ts" />
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var React = _react;

var _CarouselNinjaContent = require('./CarouselNinjaContent');

var _CarouselNinjaSelector = require('./CarouselNinjaSelector');

var KEYCODE_LEFT = 37;
var KEYCODE_RIGHT = 39;

var CarouselNinja = (function (_React$Component) {
    _inherits(CarouselNinja, _React$Component);

    function CarouselNinja() {
        _classCallCheck(this, CarouselNinja);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        _React$Component.call.apply(_React$Component, [this].concat(args));
        this.state = {
            currentSelect: 2
        };
    }

    CarouselNinja.prototype.updateSelect = function updateSelect(select) {
        if (select < 0 || select > React.Children.count(this.props.children) - 1) {
            return;
        }
        this.setState({
            currentSelect: select
        });
    };

    CarouselNinja.prototype.onKeyUp = function onKeyUp(e) {
        switch (e.keyCode) {
            case KEYCODE_LEFT:
                this.updateSelect(this.state.currentSelect - 1);
                break;
            case KEYCODE_RIGHT:
                this.updateSelect(this.state.currentSelect + 1);
                break;
        }
    };

    CarouselNinja.prototype.onSelectChange = function onSelectChange(nextI, curtI) {
        this.props.onSelect(nextI, curtI);
    };

    CarouselNinja.prototype.onClickSelector = function onClickSelector(selectI) {
        this.updateSelect(selectI);
    };

    CarouselNinja.prototype.onSwipeLeft = function onSwipeLeft(nextI) {
        this.updateSelect(nextI);
    };

    CarouselNinja.prototype.onSwipeRight = function onSwipeRight(nextI) {
        this.updateSelect(nextI);
    };

    CarouselNinja.prototype.render = function render() {
        // TODO [aria-controls]
        return React.createElement("div", { "tabIndex": 0, "className": this.props.className, "onKeyUp": this.onKeyUp.bind(this) }, React.createElement(_CarouselNinjaContent['default'], { "activeClass": this.props.activeClass, "select": this.state.currentSelect, "onSelect": this.onSelectChange.bind(this), "onSwipeLeft": this.onSwipeLeft.bind(this), "onSwipeRight": this.onSwipeRight.bind(this) }, this.props.children), React.createElement(_CarouselNinjaSelector['default'], { "activeClass": this.props.activeClass, "select": this.state.currentSelect, "length": React.Children.count(this.props.children), "onSelect": this.onSelectChange.bind(this), "onClickSelector": this.onClickSelector.bind(this) }));
    };

    return CarouselNinja;
})(React.Component);

CarouselNinja.defaultProps = {
    className: '',
    activeClass: 'is-active',
    onSelect: function onSelect() {}
};
exports.CarouselNinja = CarouselNinja;
exports.CarouselNinjaContent = _CarouselNinjaContent['default'];
exports.CarouselNinjaSelector = _CarouselNinjaSelector['default'];

},{"./CarouselNinjaContent":3,"./CarouselNinjaSelector":4,"react":undefined}]},{},[5])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
