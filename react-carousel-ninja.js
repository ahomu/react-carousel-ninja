/**
 * Modules in this bundle
 * @license
 * 
 * react-carousel-ninja:
 *   license: MIT
 *   author: ahomu
 *   homepage: https://github.com/ahomu/react-carousel-ninja
 *   version: 0.1.1
 * 
 * date-now:
 *   licenses: MIT
 *   author: Raynos <raynos2@gmail.com>
 *   maintainers: raynos <raynos2@gmail.com>
 *   contributors: Artem Shoobovych
 *   homepage: https://github.com/Raynos/date-now
 *   version: 1.0.1
 * 
 * debounce:
 *   license: MIT
 *   maintainers: mattmueller <mattmuelle@gmail.com>, jongleberry <jonathanrichardong@gmail.com>, tootallnate <nathan@tootallnate.net>, clintwood <clint@anotherway.co.za>, thehydroimpulse <dnfagnan@gmail.com>, tjholowaychuk <tj@vision-media.ca>, rauchg <rauchg@gmail.com>, retrofox <rdsuarez@gmail.com>, coreh <thecoreh@gmail.com>, forbeslindesay <forbes@lindesay.co.uk>, kelonye <kelonyemitchel@gmail.com>, yields <yields@icloud.com>, anthonyshort <antshort@gmail.com>, ianstormtaylor <ian@ianstormtaylor.com>, cristiandouce <cristian@gravityonmars.com>, swatinem <arpad.borsos@googlemail.com>, stagas <gstagas@gmail.com>, amasad <amjad.masad@gmail.com>, juliangruber <julian@juliangruber.com>, shtylman <shtylman@gmail.com>, calvinfo <calvin@calv.info>, dominicbarnes <dominic@dbarnes.info>, timoxley <secoif@gmail.com>, stephenmathieson <me@stephenmathieson.com>, trevorgerhardt <trevorgerhardt@gmail.com>
 *   homepage: https://github.com/component/debounce
 *   version: 1.0.0
 * 
 * throttleit:
 *   license: MIT
 *   maintainers: tjholowaychuk <tj@vision-media.ca>, tootallnate <nathan@tootallnate.net>, rauchg <rauchg@gmail.com>, retrofox <rdsuarez@gmail.com>, coreh <thecoreh@gmail.com>, forbeslindesay <forbes@lindesay.co.uk>, kelonye <kelonyemitchel@gmail.com>, mattmueller <mattmuelle@gmail.com>, yields <yields@icloud.com>, anthonyshort <antshort@gmail.com>, jongleberry <jonathanrichardong@gmail.com>, ianstormtaylor <ian@ianstormtaylor.com>, cristiandouce <cristian@gravityonmars.com>, swatinem <arpad.borsos@googlemail.com>, stagas <gstagas@gmail.com>, amasad <amjad.masad@gmail.com>, juliangruber <julian@juliangruber.com>, shtylman <shtylman@gmail.com>, calvinfo <calvin@calv.info>, dominicbarnes <dominic@dbarnes.info>, stephenmathieson <me@stephenmathieson.com>, trevorgerhardt <trevorgerhardt@gmail.com>, timaschew <timaschew@gmail.com>, hughsk <hughskennedy@gmail.com>
 *   homepage: https://github.com/component/throttle
 *   version: 1.0.0
 * 
 * undefined:
 * 
 * This header is generated by licensify (https://github.com/twada/licensify)
 */
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

/**
 * Module dependencies.
 */

var now = require('date-now');

/**
 * Returns a function, that, as long as it continues to be invoked, will not
 * be triggered. The function will be called after it stops being called for
 * N milliseconds. If `immediate` is passed, trigger the function on the
 * leading edge, instead of the trailing.
 *
 * @source underscore.js
 * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/
 * @param {Function} function to wrap
 * @param {Number} timeout in ms (`100`)
 * @param {Boolean} whether to execute at the beginning (`false`)
 * @api public
 */

module.exports = function debounce(func, wait, immediate){
  var timeout, args, context, timestamp, result;
  if (null == wait) wait = 100;

  function later() {
    var last = now() - timestamp;

    if (last < wait && last > 0) {
      timeout = setTimeout(later, wait - last);
    } else {
      timeout = null;
      if (!immediate) {
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      }
    }
  };

  return function debounced() {
    context = this;
    args = arguments;
    timestamp = now();
    var callNow = immediate && !timeout;
    if (!timeout) timeout = setTimeout(later, wait);
    if (callNow) {
      result = func.apply(context, args);
      context = args = null;
    }

    return result;
  };
};

},{"date-now":2}],2:[function(require,module,exports){
module.exports = Date.now || now

function now() {
    return new Date().getTime()
}

},{}],3:[function(require,module,exports){
module.exports = throttle;

/**
 * Returns a new function that, when invoked, invokes `func` at most once per `wait` milliseconds.
 *
 * @param {Function} func Function to wrap.
 * @param {Number} wait Number of milliseconds that must elapse between `func` invocations.
 * @return {Function} A new function that wraps the `func` function passed in.
 */

function throttle (func, wait) {
  var ctx, args, rtn, timeoutID; // caching
  var last = 0;

  return function throttled () {
    ctx = this;
    args = arguments;
    var delta = new Date() - last;
    if (!timeoutID)
      if (delta >= wait) call();
      else timeoutID = setTimeout(call, wait - delta);
    return rtn;
  };

  function call () {
    timeoutID = 0;
    last = +new Date();
    rtn = func.apply(ctx, args);
    ctx = null;
    args = null;
  }
}

},{}],4:[function(require,module,exports){
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var React = _react;

var _debounce = require('debounce');

var debounce = _debounce;

var DURATION_DEBOUNCE_RESIZE = 300;
var DELTA_PERCENTAGE_SWIPE = .2;
var DIRECTION_RIGHT = 0;
var DIRECTION_LEFT = 1;

var CarouselNinjaContainer = (function (_React$Component) {
    _inherits(CarouselNinjaContainer, _React$Component);

    function CarouselNinjaContainer() {
        var _this = this;

        _classCallCheck(this, CarouselNinjaContainer);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        _React$Component.call.apply(_React$Component, [this].concat(args));
        this.state = {
            outerWidth: 0,
            innerWidth: 0,
            dragging: false,
            deltaX: 0,
            deltaY: 0
        };
        this.startCoordinate = {
            x: 0,
            y: 0
        };
        this.onResize = debounce(function (evt) {
            _this.calculateWidth();
        }, DURATION_DEBOUNCE_RESIZE);
    }

    CarouselNinjaContainer.prototype.calculateWidth = function calculateWidth() {
        var firstChild = this.refs['child-' + this.props.select];
        this.setState({
            innerWidth: firstChild.clientWidth
        });
    };

    CarouselNinjaContainer.prototype.onMouseDown = function onMouseDown(evt) {
        this.startCoordinate = {
            x: evt.clientX,
            y: evt.clientY
        };
        this.setState({
            dragging: true
        });
    };

    CarouselNinjaContainer.prototype.onMouseMove = function onMouseMove(evt) {
        if (!this.state.dragging) {
            return;
        }
        evt.preventDefault();
        this.setState({
            deltaX: evt.clientX - this.startCoordinate.x,
            deltaY: evt.clientY - this.startCoordinate.y
        });
    };

    CarouselNinjaContainer.prototype.onMouseUp = function onMouseUp(evt) {
        if (!this.state.dragging) {
            return;
        }
        this.handleSwipe();
    };

    CarouselNinjaContainer.prototype.onMouseLeave = function onMouseLeave(evt) {
        if (!this.state.dragging) {
            return;
        }
        this.handleSwipe();
    };

    CarouselNinjaContainer.prototype.handleSwipe = function handleSwipe() {
        var deltaAbsX = Math.abs(this.state.deltaX);
        var threshold = this.state.innerWidth * DELTA_PERCENTAGE_SWIPE;
        if (deltaAbsX > threshold) {
            var direction = this.state.deltaX > -1 ? DIRECTION_RIGHT : DIRECTION_LEFT;
            if (direction === DIRECTION_LEFT) {
                this.props.onSwipeLeft(this.props.select + 1);
            } else if (direction === DIRECTION_RIGHT) {
                this.props.onSwipeRight(this.props.select - 1);
            }
        }
        // reset
        this.startCoordinate = {
            x: 0,
            y: 0
        };
        this.setState({
            dragging: false,
            deltaX: 0,
            deltaY: 0
        });
    };

    CarouselNinjaContainer.prototype.componentDidMount = function componentDidMount() {
        this.calculateWidth();
        window.addEventListener('resize', this.onResize);
    };

    CarouselNinjaContainer.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if (this.props.onSelect) {
            this.props.onSelect(nextProps.select, this.props.select);
        }
    };

    CarouselNinjaContainer.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
        return false || nextProps.select !== this.props.select || nextProps.children !== this.props.children || nextState !== this.state;
    };

    CarouselNinjaContainer.prototype.componentWillUnmount = function componentWillUnmount() {
        window.addEventListener('resize', this.onResize);
    };

    CarouselNinjaContainer.prototype.render = function render() {
        var _this2 = this;

        /**
         * 選択された要素が見た目上の中央であるとして、その右側と左側にあるべき要素を分類する
         *
         * @example this.props.children = [0, 1, 2, 3, 4]
         *          this.props.select   = 3
         */
        var children = React.Children.toArray(this.props.children);
        var halfSideSize = Math.floor(children.length / 2);
        // [0, 1, 2, *3*, 4] => [0, 1, 2]
        var leftward = children.slice(0, this.props.select);
        // [0, 1, 2, *3*, 4] => [4]
        var rightward = children.slice(this.props.select + 1, children.length);
        // 片側にある過剰分の要素を、もう片側に移して結合する
        if (leftward.length > halfSideSize) {
            // right:[4] + left:[0](, [1, 2]) => left:[1, 2]/ center:[3] / right:[4, 0]
            rightward = [].concat(rightward, leftward.splice(0, leftward.length - halfSideSize));
        } else if (rightward.length > halfSideSize) {
            // right:(2, 3, )[4] + left:[0] => left:[4, 0] / center:[1] / right:[2, 3]
            leftward = [].concat(rightward.splice(halfSideSize), leftward);
        }
        return React.createElement("div", { "className": 'CarouselNinjaContainer ' + (this.state.dragging ? 'CarouselNinjaContainer--dragging' : ''), "onMouseDown": this.onMouseDown.bind(this), "onMouseMove": this.onMouseMove.bind(this), "onMouseUp": this.onMouseUp.bind(this), "onMouseLeave": this.onMouseLeave.bind(this) }, children.map(function (child, i) {
            var isCenter = i === _this2.props.select;
            var isLeftEdge = false;
            var isRightEdge = false;
            var arrangedPos = undefined;
            var calcFunction = undefined;
            // TODO multiple translateX で表現できないか？ calc() があると IE10, IE11 で transition されない
            // TODO 50% のかわりに ラッパーのwidth / 2で実数計算するとか？
            // 左側・右側・中央のいずれに属しているかで位置の指定を変更する
            if ((arrangedPos = leftward.indexOf(child)) !== -1) {
                // Leftward [0=1920, 1=1280, 2=640] 左側は配列の始点に向けてオフセットを大きくとる
                var baseTranslateX = (leftward.length - arrangedPos) * _this2.state.innerWidth;
                calcFunction = 'calc(50% - ' + (baseTranslateX - _this2.state.deltaX) + 'px)';
                isLeftEdge = arrangedPos === 0;
            } else if ((arrangedPos = rightward.indexOf(child)) !== -1) {
                // Rightward [0=640, 1=1280, 2=1920] 右側は配列の終点に向けてオフセットを大きくとる
                var baseTranslateX = (arrangedPos + 1) * _this2.state.innerWidth;
                calcFunction = 'calc(50% + ' + (baseTranslateX + _this2.state.deltaX) + 'px)';
                isRightEdge = arrangedPos === rightward.length - 1;
            } else {
                // Center
                calcFunction = 'calc(50% + ' + (0 + _this2.state.deltaX) + 'px)';
            }
            var className = 'CarouselNinjaContainer__pane';
            className += isCenter ? _this2.props.activeClass : '';
            className += isRightEdge ? _this2.props.rightEdgeClass : '';
            className += isLeftEdge ? _this2.props.leftEdgeClass : '';
            var style = {
                left: calcFunction,
                marginLeft: '-' + _this2.state.innerWidth / 2 + 'px'
            };
            return React.createElement("div", { "ref": 'child-' + i, "className": className, "key": i, "style": style, "aria-hidden": isCenter ? 'false' : 'true' }, child);
        }));
    };

    return CarouselNinjaContainer;
})(React.Component);

exports['default'] = CarouselNinjaContainer;

CarouselNinjaContainer.defaultProps = {
    activeClass: ' is-active',
    rightEdgeClass: ' is-right',
    leftEdgeClass: ' is-left',
    select: 0,
    onSelect: function onSelect() {},
    onSwipeLeft: function onSwipeLeft() {},
    onSwipeRight: function onSwipeRight() {}
};

},{"debounce":1,"react":undefined}],5:[function(require,module,exports){
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var React = _react;

var CarouselNinjaSelector = (function (_React$Component) {
    _inherits(CarouselNinjaSelector, _React$Component);

    function CarouselNinjaSelector() {
        _classCallCheck(this, CarouselNinjaSelector);

        _React$Component.apply(this, arguments);
    }

    CarouselNinjaSelector.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if (this.props.onSelect) {
            this.props.onSelect(nextProps.select, this.props.select);
        }
    };

    CarouselNinjaSelector.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
        return false || nextProps.select !== this.props.select || nextProps.children !== this.props.children;
    };

    CarouselNinjaSelector.prototype.renderFromChildren = function renderFromChildren() {
        var _this = this;

        return React.Children.map(this.props.children, function (child, i) {
            var isSelectedChild = i === _this.props.select;
            var className = 'CarouselNinjaSelector__item';
            className += isSelectedChild ? _this.props.activeClass : '';
            return React.createElement("li", { "className": className, "key": i, "onClick": _this.props.onClickSelector.bind(_this, i), "aria-selected": isSelectedChild ? 'true' : 'false' }, child);
        });
    };

    CarouselNinjaSelector.prototype.renderItemsBySelf = function renderItemsBySelf() {
        var children = [],
            iz = this.props.length;
        for (var i = 0; i < iz; i++) {
            var isSelectedChild = i === this.props.select;
            var className = 'CarouselNinjaSelector__item';
            className += isSelectedChild ? this.props.activeClass : '';
            children.push(React.createElement("li", { "className": className, "key": i, "onClick": this.props.onClickSelector.bind(this, i), "aria-selected": isSelectedChild ? 'true' : 'false' }, React.createElement("button", { "tabIndex": -1 })));
        }
        return children;
    };

    CarouselNinjaSelector.prototype.render = function render() {
        return React.createElement("ul", { "className": "CarouselNinjaSelector" }, React.Children.count(this.props.children) ? this.renderFromChildren() : this.renderItemsBySelf());
    };

    return CarouselNinjaSelector;
})(React.Component);

exports['default'] = CarouselNinjaSelector;

CarouselNinjaSelector.defaultProps = {
    activeClass: ' is-active',
    select: 0,
    length: 0,
    onSelect: function onSelect() {},
    onClickSelector: function onClickSelector() {}
};

},{"react":undefined}],6:[function(require,module,exports){
/// <reference path="../typings/bundle.d.ts" />
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var React = _react;

var _throttleit = require('throttleit');

var throttle = _throttleit;

var _CarouselNinjaContainer = require('./CarouselNinjaContainer');

var _CarouselNinjaSelector = require('./CarouselNinjaSelector');

var DURATION_THROTTLE_KEYUP = 150;
var KEYCODE_LEFT = 37;
var KEYCODE_RIGHT = 39;

var CarouselNinja = (function (_React$Component) {
    _inherits(CarouselNinja, _React$Component);

    function CarouselNinja() {
        var _this = this;

        _classCallCheck(this, CarouselNinja);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        _React$Component.call.apply(_React$Component, [this].concat(args));
        this.state = {
            currentSelect: 2
        };
        this.onKeyUp = throttle(function (e) {
            switch (e.keyCode) {
                case KEYCODE_LEFT:
                    _this.updateSelect(_this.state.currentSelect - 1);
                    break;
                case KEYCODE_RIGHT:
                    _this.updateSelect(_this.state.currentSelect + 1);
                    break;
            }
        }, DURATION_THROTTLE_KEYUP);
    }

    CarouselNinja.prototype.updateSelect = function updateSelect(select) {
        var lastIndex = React.Children.count(this.props.children) - 1;
        if (select < 0) {
            this.setState({
                currentSelect: lastIndex
            });
        } else if (select > lastIndex) {
            this.setState({
                currentSelect: 0
            });
        } else {
            this.setState({
                currentSelect: select
            });
        }
    };

    CarouselNinja.prototype.onSelectChange = function onSelectChange(nextI, curtI) {
        this.props.onSelect(nextI, curtI);
    };

    CarouselNinja.prototype.onClickSelector = function onClickSelector(selectI) {
        this.updateSelect(selectI);
    };

    CarouselNinja.prototype.onSwipeLeft = function onSwipeLeft(nextI) {
        this.updateSelect(nextI);
    };

    CarouselNinja.prototype.onSwipeRight = function onSwipeRight(nextI) {
        this.updateSelect(nextI);
    };

    CarouselNinja.prototype.render = function render() {
        // TODO [aria-controls]
        return React.createElement("div", { "tabIndex": 0, "className": this.props.className, "onKeyUp": this.onKeyUp.bind(this) }, React.createElement(_CarouselNinjaContainer['default'], { "activeClass": this.props.activeClass, "select": this.state.currentSelect, "onSelect": this.onSelectChange.bind(this), "onSwipeLeft": this.onSwipeLeft.bind(this), "onSwipeRight": this.onSwipeRight.bind(this) }, this.props.children), React.createElement(_CarouselNinjaSelector['default'], { "activeClass": this.props.activeClass, "select": this.state.currentSelect, "length": React.Children.count(this.props.children), "onSelect": this.onSelectChange.bind(this), "onClickSelector": this.onClickSelector.bind(this) }));
    };

    return CarouselNinja;
})(React.Component);

CarouselNinja.defaultProps = {
    className: '',
    activeClass: ' is-active',
    onSelect: function onSelect() {}
};
exports.CarouselNinja = CarouselNinja;
exports.CarouselNinjaContainer = _CarouselNinjaContainer['default'];
exports.CarouselNinjaSelector = _CarouselNinjaSelector['default'];

},{"./CarouselNinjaContainer":4,"./CarouselNinjaSelector":5,"react":undefined,"throttleit":3}]},{},[6])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
